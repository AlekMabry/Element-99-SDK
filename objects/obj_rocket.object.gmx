<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction = 0;
pitch = 0;

x = 0;
y = 0;
z = 30;

velocity = 768;
velocity_step = velocity/60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xa = cos(direction*pi/180);
var ya = -sin(direction*pi/180);
var za = tan(degtorad(pitch));

x += xa*velocity_step;
y += ya*velocity_step;
z += za*velocity_step;

//var collision = pointCollide(class_physicsProp.boundingBox, x, y, z, class_physicsProp.x, class_physicsProp.y, class_physicsProp.z);
//if (collision != -1) {
//    var normalizedVelocity = vec3norm(collision);
//    var finalVelocity = vec3multipler(normalizedVelocity, 8);
//    class_physicsProp.velocity = vec3add(finalVelocity, class_physicsProp.velocity);
//    instance_destroy();
//}

///Calculate Collisions
IsCollision = 0;
var blockList = ds_map_find_value(global.mapData, "collisionblocks");
if (ds_list_empty(blockList)) {} else {
    var listSize = ds_list_size(blockList);
    for (var b = 0; b &lt; listSize; b++) { 
        var current_block = ds_list_find_value(blockList, b);
        //var debug = ds_map_find_value(current_block, "debug");
        var x1 = ds_map_find_value(current_block, "x1");
        var y1 = ds_map_find_value(current_block, "y1");
        var z1 = ds_map_find_value(current_block, "z1");
        var x2 = ds_map_find_value(current_block, "x2");
        var y2 = ds_map_find_value(current_block, "y2");
        var z2 = ds_map_find_value(current_block, "z2");
        var brushAABB = createAABB(x1, y1, z1, x2, y2, z2);
        
        var cPos;
        cPos[0] = x;
        cPos[1] = y;
        cPos[2] = z;
        
        if (pointOnAABB(cPos, brushAABB)) {   
            var pPos;
            pPos[0] = obj_player.x;
            pPos[1] = obj_player.y;
            pPos[2] = obj_player.z;
            
            var subtract = vec3sub(pPos, cPos);
            var distance = vec3mag(subtract);
            if (distance &lt; 128) {
                var range = (128-distance)/128 //Get a percent of how far away out of range it is
                
            }
        
            instance_destroy();
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xa = cos(obj_player.direction*pi/180);
ya = -sin(obj_player.direction*pi/180);
za = tan(degtorad(obj_player.pitch));
d3d_set_projection_ext(obj_player.x, obj_player.y, obj_player.z+obj_player.cameraZ, obj_player.x+xa, obj_player.y+ya, obj_player.z+obj_player.cameraZ+za, 0, 0, 1, 90, 16/9, 0.1, 16000);

draw_set_colour(c_red);
d3d_draw_ellipsoid(x-8, y-8, z-8, x+8, y+8, z+8, -1, 1, 1, 8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
