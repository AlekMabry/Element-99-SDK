<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsCollision = 0;
moving = false;

cycles = 0;

x = 0;
y = 0;
z = 0;

collisionBelowA = 0;

velocity[0] = 0;
velocity[1] = 0;
velocity[2] = 0;

movedir[0] = 0;
movedir[1] = 0;
movedir[2] = 0;

direction = 0;
pitch = 0;

sv_accelerate = 42; //5.5
sv_airaccelerate = 12;
sv_friction = 5.5;
sv_maxspeedground = 320;
sv_maxspeedair = 320;
sv_gravity = 10;
sv_jump = 8;

jumpNextFrame = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Box

collideBottom = false;

//Previous X, Y, and Z of player
xprev = x;
yprev = y;
zprev = z;

//Previous Velocity of player
velocityprev[0] = velocity[0];
velocityprev[1] = velocity[0];
velocityprev[2] = velocity[0];

//Bounding Box of Player
AABB[0] = x-16; //Left Wall
AABB[1] = x+16; //Right Wall
AABB[2] = y-16; //Front Wall
AABB[3] = y+16; //Back Wall
AABB[4] = z //Bottom Wall
AABB[5] = z+72 //Top Wall

//Previous Bounding Box of Player
AABBprev[0] = x-16; //Left Wall
AABBprev[1] = x+16; //Right Wall
AABBprev[2] = y-16; //Front Wall
AABBprev[3] = y+16; //Back Wall
AABBprev[4] = z //Bottom Wall
AABBprev[5] = z+72 //Top Wall


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clip = 0;
if (clip == 0){
    reload();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save previous XYZ, Velocity, and Bounding Box, and Apply Gravity
xprev = x;
yprev = y;
zprev = z;

velocityprev[0] = velocity[0];
velocityprev[1] = velocity[1];
velocityprev[2] = velocity[2];

//Previous Bounding Box of Player
AABBprev[0] = AABB[0]; //Left Wall
AABBprev[1] = AABB[1]; //Right Wall
AABBprev[2] = AABB[2]; //Front Wall
AABBprev[3] = AABB[3]; //Back Wall
AABBprev[4] = AABB[4]; //Bottom Wall
AABBprev[5] = AABB[5]; //Top Wall

//velocity[2] -= sv_gravity/60;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set movedir
direction = point_direction(x, y, obj_player.x, obj_player.y);

if (point_distance(x, y, obj_player.x, obj_player.y) &lt; 128) {
    moving = false;
} else {
    moving = true;
}

var currentPos;
currentPos[0] = x;
currentPos[1] = y;
currentPos[2] = z;

if (moving == true) {
    movedir[0] = cos(direction*pi/180);
    movedir[1] = -sin(direction*pi/180);
    movedir[2] = 0;
} else {
    movedir[0] = 0;
    movedir[1] = 0;
    movedir[2] = 0;
}

movedir = vec3norm(movedir);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if touching ground

collisionBelowA = 0;
collisionBelowA = collisionBelow(x, y, z, 16);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Movement Vector

collisionBelowA = collisionBelow(x, y, z, 16)

if (collisionBelowA != -1) {
    velocity = MoveGround(movedir, velocity); //Commented out to be sure only MoveAir is running (for testing purposes)
    if (jumpNextFrame == 1) {
        velocity[2] += sv_jump;
        jumpNextFrame = 0;
    }
} else {
    velocity = MoveAir(movedir, velocity);  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update AABB mesh

//Bounding Box of Player
AABB[0] = x-16; //Left Wall
AABB[1] = x+16; //Right Wall
AABB[2] = y-16; //Front Wall
AABB[3] = y+16; //Back Wall
AABB[4] = z //Bottom Wall
AABB[5] = z+72 //Top Wall
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Collisions and reposition
IsCollision = 0;
var blockList = ds_map_find_value(global.mapData, "collisionblocks");
if (ds_list_empty(blockList)) {} else {
    var listSize = ds_list_size(blockList);
    for (var b = 0; b &lt; listSize; b++) { 
        var current_block = ds_list_find_value(blockList, b);
        //var debug = ds_map_find_value(current_block, "debug");
        var x1 = ds_map_find_value(current_block, "x1");
        var y1 = ds_map_find_value(current_block, "y1");
        var z1 = ds_map_find_value(current_block, "z1");
        var x2 = ds_map_find_value(current_block, "x2");
        var y2 = ds_map_find_value(current_block, "y2");
        var z2 = ds_map_find_value(current_block, "z2");
        var brushAABB = createAABB(x1, y1, z1, x2, y2, z2);
        
        if (AABBcollisionExists(AABB, brushAABB)) {
            IsCollision = 1;
            var displacementChange = AABBcollisionDisplacementAI( AABB, AABBprev, velocity, brushAABB );
            x += displacementChange[0];
            y += displacementChange[1];
            z += displacementChange[2];
            
            if (displacementChange[0] != 0) { velocity[0] = 0; }
            if (displacementChange[1] != 0) { velocity[1] = 0; }
            if (displacementChange[2] != 0) { velocity[2] = 0; }
            updateAABBplayer();
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Velocity to Displacement

velocity[2] -= sv_gravity/60;

x+=velocity[0];
y+=velocity[1];
z+=velocity[2];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render npc
draw_set_colour(c_white);

xa = cos(obj_player.direction*pi/180);
ya = -sin(obj_player.direction*pi/180);
za = tan(degtorad(obj_player.pitch));
d3d_set_projection_ext(obj_player.x, obj_player.y, obj_player.z+obj_player.cameraZ, obj_player.x+xa, obj_player.y+ya, obj_player.z+obj_player.cameraZ+za, 0, 0, 1, 90, 16/9, 0.1, 16000);

//d3d_draw_block(AABB[0], AABB[2], AABB[4], AABB[1], AABB[3], AABB[5], background_get_texture(tex_floor), 1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
