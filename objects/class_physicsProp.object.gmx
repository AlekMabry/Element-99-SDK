<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Define Variables
x = x;
y = y;
z = 0;

velocity[0] = 0;
velocity[1] = 0;
velocity[2] = 0;

boundingBox[0] = -32; //x1
boundingBox[1] = 32;  //x2
boundingBox[2] = -32; //y1
boundingBox[3] = 32;  //y2
boundingBox[4] = -32; //z1
boundingBox[5] = 32;  //z2

sv_gravity = 800;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>velocity[2] -= 0.25;
x += velocity[0];
y += velocity[1];
z += velocity[2];

//boundingBoxCollision_physics();

///Calculate Collisions and Correct Velocities and Position
///Displace your prop without editing it's velocity first. This then corrects velocity and displacement if a collision has been found
///Simply run this in your movement loop with no arguments

var correctionShift;
correctionShift[0] = 0; //x
correctionShift[1] = 0; //y
correctionShift[2] = 0; //z

var blockList = ds_map_find_value(global.mapData, "collisionblocks");
if (ds_list_empty(blockList)) {} else {
    var listSize = ds_list_size(blockList);
    for (var b = 0; b &lt; listSize; b++) { 
        var current_block = ds_list_find_value(blockList, b);
        var x1 = ds_map_find_value(current_block, "x1");
        var y1 = ds_map_find_value(current_block, "y1");
        var z1 = ds_map_find_value(current_block, "z1");
        var x2 = ds_map_find_value(current_block, "x2");
        var y2 = ds_map_find_value(current_block, "y2");
        var z2 = ds_map_find_value(current_block, "z2");
        
        //check for collisions under prop
        if ((boundingBox[4]+z) &lt; z2 &amp;&amp; (boundingBox[5]+z) &gt; z1) {
            correctionShift[2] = z2-(z+boundingBox[4]);
            z += correctionShift[2];
            velocity[2] = 0;
            
            if (velocity[0] &gt;= 0.01) {
                velocity[0] -= 0.01;
            } else {
                velocity[0] = 0;
            }
            
            if (velocity[0] &lt;= -0.01) {
                velocity[0] += 0.01;
            } else {
                velocity[0] = 0;
            }
            
            if (velocity[1] &gt;= 0.01) {
                velocity[1] -= 0.01;
            } else {
                velocity[1] = 0;
            }
            
            if (velocity[1] &lt;= -0.01) {
                velocity[1] += 0.01;
            } else {
                velocity[1] = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xa = cos(obj_player.direction*pi/180);
ya = -sin(obj_player.direction*pi/180);
za = tan(degtorad(obj_player.pitch));
d3d_set_projection_ext(obj_player.x, obj_player.y, obj_player.z+obj_player.cameraZ, obj_player.x+xa, obj_player.y+ya, obj_player.z+obj_player.cameraZ+za, 0, 0, 1, 90, 16/9, 0.1, 16000);

draw_set_colour(c_white);
d3d_draw_block(boundingBox[0]+x, boundingBox[2]+y, boundingBox[4]+z, boundingBox[1]+x, boundingBox[3]+y, boundingBox[5]+z, background_get_texture(tex_missing), 1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
