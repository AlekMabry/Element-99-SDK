<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load Vertex Format

global.tex_Albedo = shader_get_sampler_index(shd_pbr, "tex_Albedo");
global.tex_Normal = shader_get_sampler_index(shd_pbr, "tex_Normal");
global.tex_Material = shader_get_sampler_index(shd_pbr, "tex_Material");

FormatE99();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Directory Path and Load Models

directoryPath = "maps\EngineHall\";

temp = d3d_model_create();
modelLoader(); //Load Model in Script Format
d3d_model_save(temp, "models\RocketLauncher.d3d");

//var tempModelLoader1 = d3d_model_create();;
//d3d_model_load(tempModelLoader1, "maps\garage\"+"models\Platform128.d3d");
//pumpkin[0] = tempModelLoader1
//pumpkin[1] = d3d_model_create();
//d3d_model_load(pumpkin[1], "maps\garage\"+"models\Pumpkin01.d3d");

global.debugString = "";
texture_set_repeat(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Decode a JSON file
var theJsonFile = file_text_open_read(directoryPath+"index.JSON");
var theData = "";
while (!file_text_eof(theJsonFile))
{
    theData += file_text_read_string(theJsonFile);
    file_text_readln(theJsonFile);
}
file_text_close(theJsonFile);

var global.mapData = json_decode(theData);


///Load all textures into game
//global.textures will hold texture info
//the global.texName ds_map will map textures to the array index
global.textures[0] = tex_missing;
global.texName = ds_map_create();

global.lightmaps[0] = tex_missing;
global.lightmapName = ds_map_create();

global.lightCount = 0;
global.lights = ds_map_create();

temp = d3d_model_create();
modelLoader(); //Load Model in Script Format
global.models[0] = temp;
global.modelTypes[0] = 0;   // 0 is d3d, 1 is E99

global.modelName = ds_map_create();

loadTextures();
loadModels();
loadLights();

var global.cubemap_negative_x[0] = surface_create(256, 256);
var global.cubemap_positive_x[0] = surface_create(256, 256);
var global.cubemap_negative_y[0] = surface_create(256, 256);
var global.cubemap_positive_y[0] = surface_create(256, 256);
var global.cubemap_negative_z[0] = surface_create(256, 256);
var global.cubemap_positive_z[0] = surface_create(256, 256);
var global.cubemap[0] = surface_create(1024, 1024);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 3D Initialization
d3d_start();
d3d_set_culling(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>viewMode = 0;
viewCollision = 0;
currentCamera = 0;
fov = 120;
cubemaps_initialized = false;

IsCollision = 0;

cycles = 0;

x = 0;
y = 0;
z = 0;

collisionBelowA = 0;

cameraZ = 64;

velocity[0] = 0;
velocity[1] = 0;
velocity[2] = 0;

movedir[0] = 0;
movedir[1] = 0;
movedir[2] = 0;

direction = 0;
pitch = 0;
isCrouched = false;
crouchAnimationValue = 0;   // How much the player is currently crouched


debug = 0;
debug1 = 0;
debug2[0] = 0;
debug2[1] = 0;
debug2[2] = 0;

sv_accelerate = 84; //5.5
sv_airaccelerate = 10;
sv_friction = 5.5;
sv_maxspeedground = 800;
sv_maxspeedair = 800;
sv_gravity = 32;
sv_jump = 32;
sv_crouchMax = 18;          // Crouch amount
sv_crouchIncrement = 36;    // Crouch velocity in Units/Second
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ReflectionTexture = noone;

///Collision Box

collideBottom = false;

//Previous X, Y, and Z of player
xprev = x;
yprev = y;
zprev = z;

//Previous Velocity of player
velocityprev[0] = velocity[0];
velocityprev[1] = velocity[0];
velocityprev[2] = velocity[0];

//Bounding Box of Player
AABB[0] = x-16; //Left Wall
AABB[1] = x+16; //Right Wall
AABB[2] = y-16; //Front Wall
AABB[3] = y+16; //Back Wall
AABB[4] = z //Bottom Wall
AABB[5] = z+72 //Top Wall

//Previous Bounding Box of Player
AABBprev[0] = x-16; //Left Wall
AABBprev[1] = x+16; //Right Wall
AABBprev[2] = y-16; //Front Wall
AABBprev[3] = y+16; //Back Wall
AABBprev[4] = z //Bottom Wall
AABBprev[5] = z+72 //Top Wall


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>-1</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>viewMode</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save previous XYZ, Velocity, and Bounding Box, and Apply Gravity
xprev = x;
yprev = y;
zprev = z;

velocityprev[0] = velocity[0];
velocityprev[1] = velocity[1];
velocityprev[2] = velocity[2];

//Previous Bounding Box of Player
AABBprev[0] = AABB[0]; //Left Wall
AABBprev[1] = AABB[1]; //Right Wall
AABBprev[2] = AABB[2]; //Front Wall
AABBprev[3] = AABB[3]; //Back Wall
AABBprev[4] = AABB[4]; //Bottom Wall
AABBprev[5] = AABB[5]; //Top Wall

//velocity[2] -= sv_gravity/60;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Position

display_w = display_get_width();
display_h = display_get_height();
    
change_x = (display_mouse_get_x()-display_w/2)/9;
change_y = (display_mouse_get_y()-display_h/2)/9;
    
display_mouse_set(display_w/2,display_h/2);
    
direction -= change_x
pitch -= change_y
    
if pitch &gt; 80 then pitch = 80;
if pitch &lt;-80 then pitch =-80;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Crouch
if (keyboard_check(vk_control)) {
    isCrouched = true;
    if (crouchAnimationValue &lt; sv_crouchMax) {
        crouchAnimationValue += (sv_crouchIncrement / 60);
        // z += (sv_crouchIncrement / 60);
    }
} else {
    isCrouched = false;
    if (crouchAnimationValue &gt; 0) {
        crouchAnimationValue -= (sv_crouchIncrement / 60);
        // z -= (sv_crouchIncrement / 60);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set movedir

var adirection = direction;
var moving = false;
var directionVec;
directionVec[0] = 0;
directionVec[1] = 0;

if (keyboard_check(ord('W'))) {
    directionVec[0]+=1;
}

if (keyboard_check(ord('S'))) {
    directionVec[0]-=1;
}

if (keyboard_check(ord('A'))) {
    directionVec[1]-=1;
}

if (keyboard_check(ord('D'))) {
    directionVec[1]+=1;
}

if (directionVec[0] != 0) {
    moving = true;
}
if (directionVec[1] != 0) {
    moving = true;
}

adirection += point_direction(0, 0, directionVec[0], directionVec[1]);

if (moving == true) {
    movedir[0] = cos(adirection*pi/180);
    movedir[1] = -sin(adirection*pi/180);
    movedir[2] = 0; //tan(degtorad(pitch));
} else {
    movedir[0] = 0;
    movedir[1] = 0;
    movedir[2] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rocket Jump

if (mouse_check_button_pressed(mb_left)) {
    var inst;
    inst = instance_create(x, y, obj_rocket);
    with (inst)
    {
        pitch = other.pitch;
        direction = other.direction;
        x = other.x;
        y = other.y;
        z = other.z+other.cameraZ;
    }

    var xa = cos(direction*pi/180);
    var ya = -sin(direction*pi/180);
    var za = tan(degtorad(pitch));
    
    for (var i = 0; i &lt; 1024; i++) {
        var xb = x+(xa*i);
        var yb = y+(ya*i);
        var zb = z+(za*i);
        
        if (zb &lt;= 0) {
            //we now know the rocket's position and player position
            //now we calculate how much push there is
            var vecdir;
            vecdir[0] = x-xb;
            vecdir[1] = y-yb;
            vecdir[2] = z-0;
            
            var d = vec3mag(vecdir);
            if (d &lt; 100) {
            } else {
                d = 0;
            }
            d *= 0.5;
            var vecnorm = vec3norm(vecdir);
            var vecfinal;
            vecfinal[0] = vecnorm[0]*d;
            vecfinal[1] = vecnorm[1]*d;
            vecfinal[2] = vecnorm[2]*d;
            
            velocity[0] += vecfinal[0];
            velocity[1] += vecfinal[1];
            velocity[2] += vecfinal[2];
            return -1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for Jumps (Enabled)


collisionBelowA = 0;
collisionBelowA = collisionBelow(x, y, z, 16);

if (collisionBelowA != -1) {
    if (keyboard_check(vk_space)) {
        velocity[2] += sv_jump;
        z += 1;
    }
}

movedir = vec3norm(movedir);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Movement Vector (Enabled)


collisionBelowA = collisionBelow(x, y, z, 16)

if (collisionBelowA != -1) {
    velocity = MoveGround(movedir, velocity); //Commented out to be sure only MoveAir is running (for testing purposes)
} else {
    velocity = MoveAir(movedir, velocity);  
}

//x+=velocity[0];
//y+=velocity[1];
//z+=velocity[2];

//collisionBelowA = collisionBelow(x, y, z, 16);

//velocity[2] -= sv_gravity/60;

//if (collisionBelowA == -1) {
//    velocity[2] -= sv_gravity/60;
//}

//if (collisionBelowA != -1) {
//    velocity[2] = 0;
//    z = collisionBelowA;
//}

//if (collisionTop(x, y, z, 16) != -1) {
//    velocity[2] = 0;
//    z = collisionTop(x, y, z, 16)-1;
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Velocity to Displacement

velocity[2] -= sv_gravity/60;

x+=velocity[0];
y+=velocity[1];
z+=velocity[2];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update AABB mesh

//Bounding Box of Player
AABB[0] = x-16; //Left Wall
AABB[1] = x+16; //Right Wall
AABB[2] = y-16; //Front Wall
AABB[3] = y+16; //Back Wall
AABB[4] = z+crouchAnimationValue; //Bottom Wall
AABB[5] = z+(72-crouchAnimationValue); //Top Wall
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Calculate Collisions and reposition
IsCollision = 0;
var blockList = ds_map_find_value(global.mapData, "collisionblocks");
if (ds_list_empty(blockList)) {} else {
    var listSize = ds_list_size(blockList);
    for (var b = 0; b &lt; listSize; b++) { 
        var current_block = ds_list_find_value(blockList, b);
        //var debug = ds_map_find_value(current_block, "debug");
        var x1 = ds_map_find_value(current_block, "x1");
        var y1 = ds_map_find_value(current_block, "y1");
        var z1 = ds_map_find_value(current_block, "z1");
        var x2 = ds_map_find_value(current_block, "x2");
        var y2 = ds_map_find_value(current_block, "y2");
        var z2 = ds_map_find_value(current_block, "z2");
        var brushAABB = createAABB(x1, y1, z1, x2, y2, z2);
        
        if (AABBcollisionExists(AABB, brushAABB)) {
            IsCollision = 1;
            var displacementChange = AABBcollisionDisplacement( AABB, AABBprev, velocity, brushAABB );
            x += displacementChange[0];
            y += displacementChange[1];
            z += displacementChange[2];
            
            if (displacementChange[0] != 0) { velocity[0] = 0; }
            if (displacementChange[1] != 0) { velocity[1] = 0; }
            if (displacementChange[2] != 0) { velocity[2] = 0; }
            updateAABBplayer();
        }
    }
}

var planeList = ds_map_find_value(global.mapData, "planarcollision");
if (ds_list_empty(planeList)) {} else {
    var listSize = ds_list_size(planeList);
    for (var b = 0; b &lt; listSize; b++) { 
        var current_plane = ds_list_find_value(planeList, b);
        var x1 = ds_map_find_value(current_plane, "x1");
        var y1 = ds_map_find_value(current_plane, "y1");
        var z1 = ds_map_find_value(current_plane, "z1");
        var x2 = ds_map_find_value(current_plane, "x2");
        var y2 = ds_map_find_value(current_plane, "y2");
        var z2 = ds_map_find_value(current_plane, "z2");
        var centerPoint;
        centerPoint[0] = ds_map_find_value(current_plane, "x");
        centerPoint[1] = ds_map_find_value(current_plane, "y");
        centerPoint[2] = ds_map_find_value(current_plane, "z");
        var normalPlane;
        normalPlane[0] = ds_map_find_value(current_plane, "normalx");
        normalPlane[0] = ds_map_find_value(current_plane, "normaly");
        normalPlane[0] = ds_map_find_value(current_plane, "normalz");
        normalPlane = vec3norm(normalPlane);
        var brushAABB = createAABB(x1, y1, z1, x2, y2, z2);
        
        if (AABBcollisionExists(AABB, brushAABB)) {
            var collisionVertices = AABBtoPoints(brushAABB);
            var farthestVertex = 100;
            var playerPos;
            playerPos[0] = x;
            playerPos[1] = y;
            playerPos[2] = z;
            if (pointToPlaneBool(centerPoint, normalPlane, playerPos)) {
                IsCollision = 1;
                var vertexDistance = pointToPlaneDistance(centerPoint, normalPlane, playerPos);
                if (vertexDistance &lt; farthestVertex) { farthestVertex = vertexDistance; }
            }
            if (farthestVertex != 100) {
                var displaceToFix = vec3multipler(normalPlane, farthestVertex);
                x += displaceToFix[0];
                y += displaceToFix[1];
                z += displaceToFix[2];
            }
            updateAABBplayer();
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_white);

if !surface_exists(global.cubemap[0])
{
    RenderCubemaps();
}

switch (viewMode)
{
    case 0:
        xa = cos(direction*pi/180);
        ya = -sin(direction*pi/180);
        za = tan(degtorad(pitch));
        d3d_set_projection_ext(x, y, z+cameraZ, x+xa, y+ya, z+cameraZ+za, 0, 0, 1, 90, 16/9, 0.1, 16000);
        
        //d3d_model_draw(pumpkin[0], -256, 0, 0, background_get_texture(tex_missing));
        //d3d_model_draw(pumpkin[1], 256, 0, 0, background_get_texture(tex_missing));
        
        //draw_collision();
        //draw_floors();
        //draw_walls();
        // draw_blocks();
        //draw_wedges();
        if (viewCollision == 1)
        {
            draw_collision();
        } else {
            draw_models();
        }
        
        d3d_set_projection_ortho(0, 0, 1280, 720, 0);
        draw_text(10, 10, string(velocity[0]));
        draw_text(10, 26, string(velocity[1]));
        draw_text(10, 42, string(velocity[2]));
        draw_text(10, 58, string(60*vec2mag(velocity)));
        draw_text(10, 74, "projVel: "+string(debug));
        draw_text(10, 90, "accelVel: "+string(debug1));
        draw_text(10, 106, "x: "+string(x));
        draw_text(10, 122, "y: "+string(y));
        draw_text(10, 138, "z: "+string(z));
        draw_text(10, 154, global.debugString);
        draw_text(10, 170, string(array_length_1d(global.models)));
        draw_text(10, 186, "FPS: " + string(fps_real));
        draw_text(10, 186+16, "Room FPS: " + string(fps));
        
        draw_set_colour(c_lime);
        draw_circle(1280/2, 720/2, 5, true);
        break;
        
    case 1:
        xa = cos(direction*pi/180);
        ya = -sin(direction*pi/180);
        za = tan(degtorad(pitch));
        d3d_set_projection_ext(x, y, z+cameraZ, x+xa, y+ya, z+cameraZ+za, 0, 0, 1, fov, 1, 0.1, 16000);
        
        if (viewCollision == 1)
        {
            draw_collision();
        } else {
            draw_models();
        }
        break;
        
    case 2:
        d3d_set_projection_ortho(0, 0, 1024, 1024, 0);
        draw_set_font(fnt_label);
        // Left (-X)
        if (surface_exists(global.cubemap_negative_x[0]))
        {
            draw_surface(global.cubemap_negative_x[0], 0, 256);
            draw_text(0, 256, "Left");
        }
        // Front (-Y)
        if (surface_exists(global.cubemap_negative_y[0]))
        {
            draw_surface(global.cubemap_negative_y[0], 256, 256);
            draw_text(256, 256, "Front");
        }
        // Right (X)
        if (surface_exists(global.cubemap_positive_x[0]))
        {
            draw_surface(global.cubemap_positive_x[0], 512, 256);
            draw_text(512, 256, "Right");
        }
        // Back (Y)
        if (surface_exists(global.cubemap_positive_y[0]))
        {
            draw_surface(global.cubemap_positive_y[0], 768, 256);
            draw_text(768, 256, "Back");
        }
        // Top (Z)
        if (surface_exists(global.cubemap_positive_z[0]))
        {
            draw_surface(global.cubemap_positive_z[0], 256, 0);
            draw_text(256, 0, "Top");
        }
        // Bottom (Z)
        if (surface_exists(global.cubemap_negative_z[0]))
        {
            draw_surface(global.cubemap_negative_z[0], 256, 512);
            draw_text(256, 512, "Bottom");
        }
        
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change Current Camera
var cameraList = ds_map_find_value(global.mapData, "cameras");
if (!ds_list_empty(cameraList))
{
    currentCamera++;
    var numberOfCameras = ds_list_size(cameraList);
    if (currentCamera &gt;= numberOfCameras)
    {
        currentCamera = 0;
    }
    x = ds_map_find_value(cameraList[| currentCamera], "x");
    y = -ds_map_find_value(cameraList[| currentCamera], "y");
    z = ds_map_find_value(cameraList[| currentCamera], "z");
    pitch = ds_map_find_value(cameraList[| currentCamera], "rotationx") - 95;
    direction = ds_map_find_value(cameraList[| currentCamera], "rotationz") - 270;
    fov = ds_map_find_value(cameraList[| currentCamera], "fov");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="86">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swap Viewmodes
viewMode++;
if (viewMode &gt; 2)
{
    viewMode = 0;
}
switch (viewMode)
{
    case 0:
        window_set_size(room_width, room_height);
        surface_resize(application_surface, room_width, room_height);
        window_center();
        break;
    case 1:
        /* Convert from rectangular view to square view */
        window_set_size(512, 512);
        surface_resize(application_surface, 1024, 1024);
        window_set_position(0, 0);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>802</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_snapshot</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>snapshot.png</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swap View Collision
if (viewCollision = 0)
{
    viewCollision = 1;
} else {
    viewCollision = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
